
$insetSize  : 1px;
$insetLight : rgba(255, 255, 255, 0.75);
$insetDark  : rgba(  48,  23,   0, 0.50 );

body {
  font-size: 10px;
}

#content {
  width: 100%;
  height: 100%;
}

#board-gutter {
  /* This will cause the gutter to wrap to the size
     of its contents. This is important since we size
     the game overlay canvas to this element. */
  display: inline-block;
  overflow: hidden;
  position: relative;
}

#board-background {
  display: inline-block;
  position: relative;
  z-index: 0;
  &:before {
    content: '';
    background: url( "../images/board.jpg" );
    transform: rotate( 180deg );
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
  &:after {
    content: '';
    background: $insetDark;
    opacity: 0.5;
    z-index: 1;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}

#board-play-space {
  box-shadow: $insetSize (-$insetSize) $insetSize $insetDark,
            (-$insetSize)   $insetSize  $insetSize $insetLight;
  z-index: 2;
}

.board-corner {
  position: relative;
  box-shadow:   $insetSize (-$insetSize) $insetSize $insetDark,
              (-$insetSize)   $insetSize  $insetSize $insetLight;
  z-index: 5;
  overflow: hidden;
  &:before {
    content: '';
    background: url( "../images/board.jpg" );
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}

#board-corner-tl {
  position: absolute;
  top: 0;
  left: 0;
}

#board-corner-tr {
  position: absolute;
  top: 0;
  right: 0;
}

#board-corner-bl {
  position: absolute;
  bottom: 0;
  left: 0;
}

#board-corner-br {
  position: absolute;
  bottom: 0;
  right: 0;
}

.square {
  float: left;
  overflow: hidden;
  position: relative;
  z-index: 3;
}

.square.black:after {
  content: '';
  position: absolute;
  width: 80px;
  height: 80px;
  z-index: 5;
  background-color: #b44300;
  opacity: 0.5;
  box-shadow: inset 0 (-$insetSize) $insetSize $insetDark, /*bottom internal shadow*/
              inset 0  $insetSize   $insetSize $insetLight; /*top internal highlight*/
}

.square.white:after {
  box-shadow: inset 0 (-$insetSize) $insetSize $insetDark, /*bottom internal shadow*/
              inset 0  $insetSize   $insetSize $insetLight; /*top internal highlight*/
}

.square i {
  position: absolute;
  bottom: $insetSize;
  right: $insetSize;
  z-index: 6;
}

// This generates the "random" wood squares for the checker board
$i : 0;
$currentXOffset: 0;
$currentYOffset: 0;
$squareSize: 80;
$maxOffset: 1024 - $squareSize;

@while $i < 100 {
  $i : $i + 1;

  $currentYOffset: $currentYOffset + $squareSize;
  @if( $currentYOffset >= $maxOffset ) {
    $currentYOffset: 0;
    $currentXOffset: $currentXOffset + $squareSize;
    @if( $currentXOffset >= $maxOffset ) {
      $currentXOffset: 0;
    }
  }

  .sq#{$i}:before {
    content: '';
    width: 80px;
    height: 80px;
    position: absolute;
    z-index: 4;
    background-image: url("../images/board.jpg");
    background-position: #{$currentXOffset}px #{$currentYOffset}px;
  }
}